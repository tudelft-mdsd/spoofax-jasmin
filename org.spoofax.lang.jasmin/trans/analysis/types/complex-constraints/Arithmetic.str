module analysis/types/complex-constraints/Arithmetic

imports
  include/JasminXT
  analysis/names/properties
  analysis/types/constraints

rules
  //TODO:
  complex-constraint(|r): (instr@IINC(varname, amount), (c*,r*)) -> <id>//([n*, c*], [r*])
    where id
    /*cref  := Reference(CRef(<fresh-var>))
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
    	; n* := [ CEq(TypeVar(i-in), ([cref], <fresh-var>)) // pop-type
    	        , CEq(TypeVar(i-out), [cref])               // push-type
    	        ]*/
  complex-constraint(|r): (instr@IINC_W(varname, amount), (c*,r*)) -> <id>//([n*, c*], [r*])
    where id
    /*cref  := Reference(CRef(<fresh-var>))
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
    	; n* := [ CEq(TypeVar(i-in), ([cref], <fresh-var>)) // pop-type
    	        , CEq(TypeVar(i-out), [cref])               // push-type
    	        ]*/