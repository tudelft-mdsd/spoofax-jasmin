module src-gen/pp/JasminXT-Methods-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  src-gen/signatures/JasminXT-Methods-sig


imports
  src-gen/signatures/JasminXT-Names-sig
  src-gen/signatures/JasminXT-Numbers-sig
  src-gen/signatures/JasminXT-Strings-sig
  src-gen/signatures/JasminXT-Descriptors-sig
  src-gen/signatures/JasminXT-Instructions-sig
  src-gen/signatures/JasminXT-Directives-sig


imports
  src-gen/pp/JasminXT-Names-pp
  src-gen/pp/JasminXT-Numbers-pp
  src-gen/pp/JasminXT-Strings-pp
  src-gen/pp/JasminXT-Descriptors-pp
  src-gen/pp/JasminXT-Instructions-pp
  src-gen/pp/JasminXT-Directives-pp


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-Method


strategies
  prettyprint-example =
    prettyprint-Method

  prettyprint-example =
    prettyprint-MethodAccess

  prettyprint-Method :
    JBCMethod(t1__, t2__, t3__, t4__) -> [ H(
                                             [SOpt(HS(), "0")]
                                           , [ S(".method ")
                                             , t1__'
                                             , S(" ")
                                             , t2__'
                                             , S(" ")
                                             , t3__'
                                             ]
                                           )
                                         , t4__'
                                         , H(
                                             [SOpt(HS(), "0")]
                                           , [S(".end method")]
                                           )
                                         ]
    with t1__' := <pp-H-list(prettyprint-MethodAccess|" ")> t1__
    with t2__' := <pp-one-Z(prettyprint-MethodName)> t2__
    with t3__' := <pp-one-Z(prettyprint-MethodDescriptor)> t3__
    with t4__' := <pp-indent(|"2")> [ <pp-V-list(prettyprint-Statement|"0", "\t")> t4__
                                    ]

  is-Method =
    ?JBCMethod(_, _, _, _)

  prettyprint-MethodAccess :
    PUBLIC() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("public")]
                  )
                ]

  is-MethodAccess =
    ?PUBLIC()

  prettyprint-MethodAccess :
    PRIVATE() -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("private")]
                   )
                 ]

  is-MethodAccess =
    ?PRIVATE()

  prettyprint-MethodAccess :
    PROTECTED() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("protected")]
                     )
                   ]

  is-MethodAccess =
    ?PROTECTED()

  prettyprint-MethodAccess :
    STATIC() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("static")]
                  )
                ]

  is-MethodAccess =
    ?STATIC()

  prettyprint-MethodAccess :
    FINAL() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("final")]
                 )
               ]

  is-MethodAccess =
    ?FINAL()

  prettyprint-MethodAccess :
    SYNCHRONIZED() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("synchronized")]
                        )
                      ]

  is-MethodAccess =
    ?SYNCHRONIZED()

  prettyprint-MethodAccess :
    NATIVE() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("native")]
                  )
                ]

  is-MethodAccess =
    ?NATIVE()

  prettyprint-MethodAccess :
    ABSTRACT() -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("abstract")]
                    )
                  ]

  is-MethodAccess =
    ?ABSTRACT()

  is-Method =
    fail

  is-MethodAccess =
    fail


strategies
  prettyprint-example =
    prettyprint-Statement

  prettyprint-example =
    prettyprint-Label

  prettyprint-Statement :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statement)
    where t1__' := <pp-one-Z(prettyprint-PCInstruction)> t1__

  prettyprint-Statement :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statement)
    where t1__' := <pp-one-Z(prettyprint-Directive)> t1__

  prettyprint-Statement :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statement)
    where t1__' := <pp-one-Z(prettyprint-Label)> t1__

  prettyprint-Label :
    JBCLabel(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__', S(":")]
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-LabelName)> t1__

  is-Label =
    ?JBCLabel(_)

  is-Statement =
    fail

  is-Label =
    fail