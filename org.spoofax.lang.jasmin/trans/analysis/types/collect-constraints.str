module analysis/types/collect-constraints

imports
  include/JasminXT
  analysis/names/properties
  analysis/names/extra-constructors
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  trans/match-Instruction

rules
  fresh-var = !TypeVar(<new>)

  stack-constraints(|ctx): JBCMethod(_, _, JBCMethodDesc(_,r), []) -> ([], [CEq(r, Void())])
  stack-constraints(|ctx): JBCMethod(_, _, JBCMethodDesc(p*,r), l) -> ([stack-start, push*, pop*, next*, complex*], [])
    where l'@[h|_] := <filter(match-Instruction)> l
    	; h-in  := <get-in-stack>  h
    	; stack-start := CEq(TypeVar(h-in), [])
        ; h-out := <get-out-stack> h
        ; push* := <filter(push-constraints)> l'
        ; pop*  := <filter(pop-constraints)> l'
        ; next* := <foldl(next-constraints(|ctx));Snd> (l', (h-out, []))
        ; complex* := <foldl(complex-constraints(|r))> (l', [])
          // TODO: add initial types for local variables
            // using the class defined in the file (get through NaBL)
            // using parameter types p*
          // TODO: add more constraints for local variables
  
  pop-constraints: instr -> CEq(TypeVar(i-in), (p*, <fresh-var>))
    where p* := <pop-type> instr
        ; i-in := <get-in-stack> instr
  pop-type = get-pop-type;not(?[])

  push-constraints: instr -> CEq(TypeVar(i-out), (p*, <fresh-var>))
    where p* := <push-type> instr
        ; i-out := <get-out-stack> instr
  push-type = get-push-type;not(?[])

  next-constraints(|ctx): (instr, (prev-out, c*)) -> (<get-out-stack> instr, [n*, c*])
    where i-in := <get-in-stack> instr
        ; n* := <next-instr;map(next-helper(|ctx, prev-out, i-in))> instr
  
  next-helper(|ctx,prev-out,i-in) = \NEXT() -> CEq(TypeVar(prev-out),TypeVar(i-in))\
                                 <+ \LabelRef(l) -> CEq(TypeVar(prev-out),<get-in-stack> l)\
  next-instr = get-next-instr <+ ![NEXT()]
  
  complex-constraints(|r) = complex-constraint(|r) <+ \(_, c*) -> c*\
    
  complex-constraint(|r): (instr@ATHROW(), c*) -> [n*, c*]
    where cref  := Reference(CRef(<fresh-var>))
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
    	; n* := [ CEq(TypeVar(i-in), ([cref], <fresh-var>)) // pop-type
    	        , CEq(TypeVar(i-out), [cref])         // push-type
    	        ]
  complex-constraint(|r): (instr@CHECKCAST(_), c*) -> [n*, c*]
    where cref  := Reference(CRef(<fresh-var>))
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
    	; n* := [ CEq(TypeVar(i-in), ([cref], <fresh-var>)) // pop-type
    	        , CEq(TypeVar(i-out), TypeVar(i-in))         // push-type
    	        ]
  complex-constraint(|r): (instr@DUP(), c*) -> [n*, c*]
    where type@TypeVar(type') := <fresh-var>
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
        ; rest  := <fresh-var>
    	; n* := [ CEq(TypeVar(i-in),  ([type], rest))       // pop-type
    	        , CEq(TypeVar(i-out), ([type, type], rest)) // push-type
    	        , CNEq(TypeVar(type'), Double())
    	        , CNEq(TypeVar(type'), Long())
    	        ]
  complex-constraint(|r): (instr@DUP2(), c*) -> [n*, c*]
    where type@TypeVar(type')  := <fresh-var>
        ; type1@TypeVar(type1') := <fresh-var>
        ; type2@TypeVar(type2') := <fresh-var>
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
        ; rest  := <fresh-var>
    	; n* := [ COr([ [ CEq(TypeVar(i-in),  ([type], rest))       // pop-type
    	                , CEq(TypeVar(i-out), ([type, type], rest)) // push-type
    	                , COr([ [ CEq(TypeVar(type'), Double()) ]
    	                      , [ CEq(TypeVar(type'), Long()) ]
    	                      ])
    	                ]
    	              , [ CEq(TypeVar(i-in),  ([type1, type2], rest))               // pop-type
    	                , CEq(TypeVar(i-out), ([type1, type2, type1, type2], rest)) // push-type
    	                , CNEq(TypeVar(type1'), Double())
              	        , CNEq(TypeVar(type1'), Long())
    	                , CNEq(TypeVar(type2'), Double())
              	        , CNEq(TypeVar(type2'), Long())
    	                ]
    	              ])
    	        ]
  complex-constraint(|r): (instr@DUP_X1(), c*) -> [n*, c*]
    where type1@TypeVar(type1') := <fresh-var>
        ; type2@TypeVar(type2') := <fresh-var>
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
        ; rest  := <fresh-var>
    	; n* := [ CEq(TypeVar(i-in),  ([type1, type2], rest))        // pop-type
    	        , CEq(TypeVar(i-out), ([type1, type2, type1], rest)) // push-type
    	        , CNEq(TypeVar(type1'), Double())
    	        , CNEq(TypeVar(type1'), Long())
    	        , CNEq(TypeVar(type2'), Double())
    	        , CNEq(TypeVar(type2'), Long())
    	        ]
  complex-constraint(|r): (instr@DUP2_X1(), c*) -> [n*, c*]
    where type1@TypeVar(type1') := <fresh-var>
        ; type2@TypeVar(type2') := <fresh-var>
        ; type3@TypeVar(type3') := <fresh-var>
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
        ; rest  := <fresh-var>
    	; n* := [ CEq(TypeVar(type2'), Double())
              	, CEq(TypeVar(type2'), Long())
              	, COr([ [ CEq(TypeVar(i-in),  ([type1, type2], rest))       // pop-type
    	                , CEq(TypeVar(i-out), ([type1, type2, type1], rest)) // push-type
    	                , COr([ [ CEq(TypeVar(type1), Double()) ]
    	                      , [ CEq(TypeVar(type1), Long()) ]
    	                      ])
    	                ]
    	              , [ CEq(TypeVar(i-in),  ([type1, type2, type3], rest))               // pop-type
    	                , CEq(TypeVar(i-out), ([type1, type2, type3, type1, type2], rest)) // push-type
    	                , CNEq(TypeVar(type1'), Double())
              	        , CNEq(TypeVar(type1'), Long())
    	                , CNEq(TypeVar(type3'), Double())
              	        , CNEq(TypeVar(type3'), Long())
    	                ]
    	              ])
    	        ]
  complex-constraint(|r): (instr@DUP_X2(), c*) -> [n*, c*]
    where type1@TypeVar(type1') := <fresh-var>
        ; type2@TypeVar(type2') := <fresh-var>
        ; type3@TypeVar(type3') := <fresh-var>
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
        ; rest  := <fresh-var>
    	; n* := [ CEq(TypeVar(type1'), Double())
                , CEq(TypeVar(type1'), Long())
                , COr( [ [ CEq(TypeVar(i-in),  ([type1, type2, type3], rest))        // pop-type
    	                 , CEq(TypeVar(i-out), ([type1, type2, type3, type1], rest)) // push-type
    	                 , CNEq(TypeVar(type2'), Double())
    	                 , CNEq(TypeVar(type2'), Long())
    	                 , CNEq(TypeVar(type3'), Double())
    	                 , CNEq(TypeVar(type3'), Long())
    	                 ]
    	               , [ CEq(TypeVar(i-in),  ([type1, type2], rest))        // pop-type
    	                 , CEq(TypeVar(i-out), ([type1, type2, type1], rest)) // push-type
    	                 , COr([ [ CEq(TypeVar(type2'), Double()) ]
    	                       , [ CEq(TypeVar(type2'), Long())   ]
    	                       ])
    	                 ]
    	               ])
	            ]
  complex-constraint(|r): (instr@DUP2_X2(), c*) -> [n*, c*]
    where type1@TypeVar(type1') := <fresh-var>
        ; type2@TypeVar(type2') := <fresh-var>
        ; type3@TypeVar(type3') := <fresh-var>
        ; type4@TypeVar(type4') := <fresh-var>
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
        ; rest  := <fresh-var>
    	; n* := [ COr([ [ CEq(TypeVar(i-in),  ([type1, type2, type3], rest))        // pop-type
    	                , CEq(TypeVar(i-out), ([type1, type2, type3, type1], rest)) // push-type
    	                , COr([ [ CEq(TypeVar(type1'), Double()) ]
    	                      , [ CEq(TypeVar(type1'), Long()) ]
    	                      ])
    	                , CNEq(TypeVar(type2'), Double())
              	        , CNEq(TypeVar(type2'), Long())
    	                , CNEq(TypeVar(type3'), Double())
              	        , CNEq(TypeVar(type3'), Long())
    	                ]
    	              , [ CEq(TypeVar(i-in),  ([type1, type2], rest))        // pop-type
    	                , CEq(TypeVar(i-out), ([type1, type2, type1], rest)) // push-type
    	                , COr([ [ CEq(TypeVar(type1'), Double()) ]
    	                      , [ CEq(TypeVar(type1'), Long()) ]
    	                      ])
    	                , COr([ [ CEq(TypeVar(type2'), Double()) ]
    	                      , [ CEq(TypeVar(type2'), Long()) ]
    	                      ])
    	                ]
    	              , [ CEq(TypeVar(i-in),  ([type1, type2, type3], rest))               // pop-type
    	                , CEq(TypeVar(i-out), ([type1, type2, type3, type1, type2], rest)) // push-type
    	                , CNEq(TypeVar(type1'), Double())
              	        , CNEq(TypeVar(type1'), Long())
    	                , CNEq(TypeVar(type2'), Double())
              	        , CNEq(TypeVar(type2'), Long())
    	                , COr([ [ CEq(TypeVar(type3'), Double()) ]
    	                      , [ CEq(TypeVar(type3'), Long()) ]
    	                      ])
    	                ]
    	              , [ CEq(TypeVar(i-in),  ([type1, type2, type3, type4], rest))               // pop-type
    	                , CEq(TypeVar(i-out), ([type1, type2, type3, type4, type1, type2], rest)) // push-type
    	                , CNEq(TypeVar(type1'), Double())
              	        , CNEq(TypeVar(type1'), Long())
    	                , CNEq(TypeVar(type2'), Double())
              	        , CNEq(TypeVar(type2'), Long())
    	                , CNEq(TypeVar(type3'), Double())
              	        , CNEq(TypeVar(type3'), Long())
    	                , CNEq(TypeVar(type4'), Double())
              	        , CNEq(TypeVar(type4'), Long())
    	                ]
    	              ])
    	        ]
  complex-constraint(|r): (instr@SWAP(), c*) -> [n*, c*]
    where type1@TypeVar(type1') := <fresh-var>
        ; type2@TypeVar(type2') := <fresh-var>
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
        ; rest  := <fresh-var>
    	; n* := [ CEq(TypeVar(i-in),  ([type1, type2], rest)) // pop-type
    	        , CEq(TypeVar(i-out), ([type2, type1], rest)) // push-type
    	        , CNEq(TypeVar(type1'), Double())
    	        , CNEq(TypeVar(type1'), Long())
    	        , CNEq(TypeVar(type2'), Double())
    	        , CNEq(TypeVar(type2'), Long())
    	        ]
  complex-constraint(|r): (instr@RETURN(), c*) -> [n*, c*]
    where i-out := <get-out-stack> instr
    	; n* := [ CEq(TypeVar(i-out), []) // push-type
    	        , CEq(r, Void()) ]
  complex-constraint(|r): (instr@IRETURN(), c*) -> [n*, c*]
    where i-out := <get-out-stack> instr
    	; n* := [ CEq(TypeVar(i-out), []) // push-type
    	        , CEq(r, Int()) ]
  complex-constraint(|r): (instr@LRETURN(), c*) -> [n*, c*]
    where i-out := <get-out-stack> instr
    	; n* := [ CEq(TypeVar(i-out), []) // push-type
    	        , CEq(r, Long()) ]
  complex-constraint(|r): (instr@FRETURN(), c*) -> [n*, c*]
    where i-out := <get-out-stack> instr
    	; n* := [ CEq(TypeVar(i-out), []) // push-type
    	        , CEq(r, Float()) ]
  complex-constraint(|r): (instr@DRETURN(), c*) -> [n*, c*]
    where i-out := <get-out-stack> instr
    	; n* := [ CEq(TypeVar(i-out), []) // push-type
    	        , CEq(r, Double()) ]
  complex-constraint(|r): (instr@ARETURN(), c*) -> [n*, c*]
    where i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack>  instr
        ; classtype := Reference(CRef(<fresh-var>))
    	; n* := [ CEq(TypeVar(i-out), [])  // push-type
    	        , CEq(TypeVar(i-in), [classtype]) // pop-type
    	        , CSub(classtype, r) ]
      	        
  complex-constraint(|r): (instr@MONITORENTER(), c*) -> [n*, c*]
    where i-out := <get-out-stack> instr
        ; i-in  := <get-out-stack> instr
    	; n* := [ CEq(TypeVar(i-in), [Reference(CRef(<fresh-var>))]) ] // pop-type
  complex-constraint(|r): (instr@MONITOREXIT(), c*) -> [n*, c*]
    where i-out := <get-out-stack> instr
        ; i-in  := <get-out-stack> instr
    	; n* := [ CEq(TypeVar(i-in), [Reference(CRef(<fresh-var>))]) ] // pop-type
    	  
  complex-constraint(|r): (instr@BALOAD(), c*) -> [n*, c*]
    where i-out := <get-out-stack> instr
    	; n* := [ COr([ [CEq(TypeVar(i-out), ([Byte()],<fresh-var>))]
    	              , [CEq(TypeVar(i-out), ([Boolean()],<fresh-var>))]]) ] // push-type
  complex-constraint(|r): (instr@BASTORE(), c*) -> [n*, c*]
    where i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack>  instr
    	; n* := [ COr([ [CEq(TypeVar(i-in), ([Byte()],<fresh-var>))]
    	              , [CEq(TypeVar(i-in), ([Boolean()],<fresh-var>))]]) ] // pop-type
  complex-constraint(|r): (instr@AALOAD(), c*) -> [n*, c*]
    where i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack>  instr
        ; rest  := <fresh-var>
        ; class-type := Reference(CRef(<fresh-var>))
        ; array-type := Array(<fresh-var>)
    	; n* := [COr([ [ CEq(TypeVar(i-in), ([Int(), Array(class-type)], rest))   // pop-type
    	               , CEq(TypeVar(i-out), ([class-type],rest))               ] // push-type
    	             , [ CEq(TypeVar(i-in), ([Int(), Array(array-type)], rest))   // pop-type
    	               , CEq(TypeVar(i-out), ([array-type],rest))               ] // push-type
    	             ])]
  complex-constraint(|r): (instr@AASTORE(), c*) -> [n*, c*]
    where i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack>  instr
        ; rest  := <fresh-var>
        ; class-type := Reference(CRef(<fresh-var>))
        ; array-type := Array(<fresh-var>)
    	; n* := [COr([ [ CEq(TypeVar(i-in), ([class-type, Int(), Array(class-type)], rest)) ] // pop-type
    	             , [ CEq(TypeVar(i-in), ([array-type, Int(), Array(array-type)], rest)) ] // pop-type
    	             ])]
  complex-constraint(|r): (instr@BALOAD(), c*) -> [n*, c*]
    where i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack>  instr
        ; rest  := <fresh-var>
    	; n* := [COr([ [ CEq(TypeVar(i-in), ([Int(), Array(Boolean())], rest))   // pop-type
    	               , CEq(TypeVar(i-out), ([Boolean()],rest))               ] // push-type
    	             , [ CEq(TypeVar(i-in), ([Int(), Array(Byte())], rest))   // pop-type
    	               , CEq(TypeVar(i-out), ([Byte()],rest))               ] // push-type
    	             ])]
  complex-constraint(|r): (instr@BASTORE(), c*) -> [n*, c*]
    where i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack>  instr
        ; rest  := <fresh-var>
    	; n* := [COr([ [ CEq(TypeVar(i-in), ([Boolean(), Int(), Array(Boolean())], rest)) ] // pop-type
    	             , [ CEq(TypeVar(i-in), ([Byte(), Int(), Array(Byte())], rest)) ] // pop-type
    	             ])]
    	             
  cc-aload-helper(|type): (instr, c*) -> [n*, c*]
    where i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack>  instr
        ; rest  := <fresh-var>
    	; n* := [ CEq(TypeVar(i-in), ([Int(), Array(type)], rest))   // pop-type
                , CEq(TypeVar(i-out), ([type],rest))               ] // push-type
  cc-astore-helper(|type): (instr, c*) -> [n*, c*]
    where i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack>  instr
        ; rest  := <fresh-var>
    	; n* := [ CEq(TypeVar(i-in), ([type, Int(), Array(type)], rest)) ] // pop-type
  complex-constraint(|r): (CALOAD(),  (_, _)) -> <cc-aload-helper(|Char())>
  complex-constraint(|r): (CASTORE(), (_, _)) -> <cc-astore-helper(|Char())>
  complex-constraint(|r): (DALOAD(),  (_, _)) -> <cc-aload-helper(|Double())>
  complex-constraint(|r): (DASTORE(), (_, _)) -> <cc-astore-helper(|Double())>
  complex-constraint(|r): (FALOAD(),  (_, _)) -> <cc-aload-helper(|Float())>
  complex-constraint(|r): (FASTORE(), (_, _)) -> <cc-astore-helper(|Float())>
  complex-constraint(|r): (IALOAD(),  (_, _)) -> <cc-aload-helper(|Int())>
  complex-constraint(|r): (IASTORE(), (_, _)) -> <cc-astore-helper(|Int())>
  complex-constraint(|r): (LALOAD(),  (_, _)) -> <cc-aload-helper(|Long())>
  complex-constraint(|r): (LASTORE(), (_, _)) -> <cc-astore-helper(|Long())>
  complex-constraint(|r): (SALOAD(),  (_, _)) -> <cc-aload-helper(|Short())>
  complex-constraint(|r): (SASTORE(), (_, _)) -> <cc-astore-helper(|Short())>
    	  
  complex-constraint(|r): (instr@name#([_]), c*) -> [n*, c*]
    where <string-starts-with(|"ASTORE")> name
    	; i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack>  instr
        ; rest  := <fresh-var>
        ; class-type := Reference(CRef(<fresh-var>))
    	; n* := [ CEq(TypeVar(i-in), ([class-type], rest)) ] // pop-type

  complex-constraint(|r): (instr@name#([JBCMethodRef(cref, _, JBCMethodDesc(p, r))]), c*) -> [n*, c*]
    where (!"INVOKESPECIAL" => name + !"INVOKEVIRTUAL" => name + !"INVOKEINTERFACE" => name)
    	; i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack> instr
        ; rest  := <fresh-var>
        ; class-type := Reference(cref)
        ; ret-type := <try(\[Void()] -> []\)> [r]
        ; n* := [ CSub(i-in, (<reverse> [class-type|p], rest))   // pop-type
                , CSub(i-out, (ret-type, rest))                ] // push-type
  complex-constraint(|r): (instr@INVOKESTATIC(JBCMethodRef(_, _, JBCMethodDesc(p, r))), c*) -> [n*, c*]
    where i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack> instr
        ; rest  := <fresh-var>
        ; ret-type := <try(\[Void()] -> []\)> [r]
        ; n* := [ CSub(i-in, (<reverse> p, rest))   // pop-type
                , CSub(i-out, (ret-type, rest))   ] // push-type