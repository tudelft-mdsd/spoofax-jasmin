module analysis/types/solve-constraints-test

imports
	include/JasminXT
	runtime/nabl/-
	runtime/task/-
	runtime/types/-
	trans/analysis/types/-
	trans/analysis/names/-
	
rules
	solve-test-constraints: x -> ["Equality", eq*, "Subtyping", sub*, "Or", or*, "inequality", notEq*, "complex", complex*]
		where eq* := <solve-eq-test-constraints> x
			; sub* := <solve-sub-test-constraints> x
			; or* := [] // TODO testcases
			; notEq* := [] // TODO testcases
			; complex* := [] // TODO testcases

rules
	solve-eq-test-constraints: _ -> [a, b, c, d, e, f, g, h, i, j]
		where a := <try(solve-constraints)> [] // empty list
			; b := <try(solve-constraints)> [CEq(TypeVar("test"), [])] // one element in list
			; c := <try(solve-constraints)> [CEq(TypeVar("test"), []), CEq(TypeVar("test2"), [])] // two elements in list
			; d := <try(solve-constraints)> [CEq(TypeVar("test"), []), CEq(TypeVar("test2"), []), CEq(TypeVar("abc"), TypeVar("test"))] // two elements, one dependency
			; e := <try(solve-constraints)> [CEq(TypeVar("abc"), TypeVar("test")), CEq(TypeVar("test"), []), CEq(TypeVar("test2"), [])] // one dependency two elements
			; f := <try(solve-constraints)> [CEq(TypeVar("cyclic"), TypeVar("failure")), CEq(TypeVar("test2"), []), CEq(TypeVar("failure"), TypeVar("cyclic"))] // cyclic dependency
			; g := <try(solve-constraints)> [CEq(TypeVar("test"), TypeVar("abc")),
			  								 CEq(TypeVar("test2"), []),
			  								 CEq(TypeVar("abc"), TypeVar("test")),
			  								 CEq(TypeVar("abc"), [])] // cyclic dependency solved with multi-ceq
			; h := <try(solve-constraints)> [CEq(TypeVar("failure"), Int()), CEq(TypeVar("failure"), [])] // conflicting values for the same variable
			; i := <try(solve-constraints)> [CEq([TypeVar("a"), TypeVar("b")], [Int(), Int()])]
			; j := <try(solve-constraints)> [CEq(Array(TypeVar("a")), Array(Int()))]
			  
			  
	solve-sub-test-constraints: _ -> [a, b, c, d, e, f]	  
		where a := <try(solve-constraints)> [CSub(TypeVar("a"), Int())]
			; b := <try(solve-constraints)> [CSub(TypeVar("a"), Boolean())]
			; c := <try(solve-constraints)> [CSub(Array(TypeVar("a")), Array(Int()))]
			; d := <try(solve-constraints)> [CSub(TypeVar("a"), Reference(CRef("java/lang/Object"))), CSub(TypeVar("a"), Reference(CRef("java/lang/String")))]
			; e := <try(solve-constraints)> [CSub(TypeVar("a"), Reference(CRef("java/lang/String"))), CEq(TypeVar("a"), TypeVar("b")), CSub(TypeVar("b"), Reference(CRef("java/lang/Object")))]
; f := <inflate-csub-types> [("x", ["a", "b"]), ("y", [Array("x")])]