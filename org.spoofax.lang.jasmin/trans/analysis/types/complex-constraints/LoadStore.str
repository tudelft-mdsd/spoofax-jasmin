module analysis/types/complex-constraints/LoadStore

imports
  include/JasminXT
  analysis/names/properties
  analysis/types/constraints  

rules
  // treat *LOAD_# and *STORE_# as *LOAD(#) and *STORE(#) resp.
  complex-constraint: (instr@name#([]), (c*,r*)) -> <complex-constraint> (name'#([VarNum(i)]), (c*,r*))
  	where (name', i) := <split-after;(rtrim-chars(?'_'),id)> (name, "_")
  	    ; <string-ends-with(|"STORE") + string-ends-with(|"LOAD")> name'

  cc-r-match(|at, var): i-in -> CEq(TypeVar(i-in),   (first, rest))
    where rest   := <fresh-var>
        ; first  := <repeat(![<fresh-var> | <id>], <dec> at)> [var]
  cc-r-subst(|at, var): (i-in, i-out) ->
      [ CEq(TypeVar(i-in),  (f-i-in, rest))
      , CEq(TypeVar(i-out), (fSubst, rest)) ]
    where rest   := <fresh-var>
        ; first  := <repeat(![<fresh-var> | <id>], <dec> at)> []
        ; f-i-in := <conc> (first, [<fresh-var>])
        ; fSubst := <conc> (first, [var])

  complex-constraint: (instr@name#([VarNum(vn)]), (c*,r*)) -> ([nc*, c*], [nr*, r*])
    where <string-starts-with(|"ALOAD")> name
    	; i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack>  instr
        ; class-type := Reference(CRef(<fresh-var>))
    	; vn'   := <dec-string-to-int> vn
    	; var   := <fresh-var>
    	; nrm   := <cc-r-match(|vn', var)> i-in
    	; nr*   := [ nrm
    	           , COr([ [CSub(var, class-type)]
    	                 , [CEq (var, ADDRESS() )]
    	                 ])
    	           ]
        ; rest := <fresh-var>
    	; nc*   := [ CEq(TypeVar(i-out), ([var], rest)) ] // push-type

  complex-constraint: (instr@name#([VarNum(vn)]), (c*,r*)) -> ([nc*, c*], [nr*, r*])
    where <string-starts-with(|"ASTORE")> name
    	; i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack>  instr
    	; var   := <fresh-var>
        ; rest := <fresh-var>
        ; class-type := Reference(CRef(<fresh-var>))
    	; nc*   := [ CEq(TypeVar(i-in), ([var], rest))
    	  	       , COr([ [CSub(var, class-type)] // pop-type
    	                 , [CEq (var, ADDRESS() )] // pop-type
    	                 ])
    	           ]
    	; vn'   := <dec-string-to-int> vn
    	; nr*   := <cc-r-subst(|vn', var)> (i-in, i-out)

  cc-load-helper(|type, vn): (instr, (c*,r*)) -> ([nc*, c*], [nr*, r*])
    where i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack>  instr
        ; rest  := <fresh-var>
    	; vn'   := <dec-string-to-int> vn
    	; nrm   := <cc-r-match(|vn', type)> i-in
        ; nr*   := [ nrm ]
    	; nc*   := [ CEq(TypeVar(i-out), ([type],rest)) ] // push-type
  
  cc-store-helper(|type, vn): (instr, (c*,r*)) -> ([nc*, c*], [nr*, r*])
    where i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack>  instr
        ; rest  := <fresh-var>
    	; nc*   := [ CEq(TypeVar(i-in), ([type], rest)) ] // pop-type
    	; vn'   := <dec-string-to-int> vn
    	; nr*   := <cc-r-subst(|vn', type)> (i-in, i-out)
  

  complex-constraint: (DLOAD (VarNum(vn)), _) -> <cc-load-helper (|Double(), vn)>
  complex-constraint: (DSTORE(VarNum(vn)), _) -> <cc-store-helper(|Double(), vn)>
  complex-constraint: (FLOAD (VarNum(vn)), _) -> <cc-load-helper (|Float() , vn)>
  complex-constraint: (FSTORE(VarNum(vn)), _) -> <cc-store-helper(|Float() , vn)>
  complex-constraint: (ILOAD (VarNum(vn)), _) -> <cc-load-helper (|Int()   , vn)>
  complex-constraint: (ISTORE(VarNum(vn)), _) -> <cc-store-helper(|Int()   , vn)>
  complex-constraint: (LLOAD (VarNum(vn)), _) -> <cc-load-helper (|Long()  , vn)>
  complex-constraint: (LSTORE(VarNum(vn)), _) -> <cc-store-helper(|Long()  , vn)>