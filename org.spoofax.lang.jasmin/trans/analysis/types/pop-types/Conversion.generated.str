module trans/analysis/types/pop-types/Conversion.generated

imports
  
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  lib/runtime/relations/-

imports

  include/JasminXT
  analysis/types/constraints
  
signature constructors
  
  
  
rules // functions 
  

rules // relations
  

rules // rules
  
  create-pop-type-task(|ctx) :
    I2L() -> <task-create-id(|ctx,[x157])> x157
    where 
      x157 := <type-is(|ctx)> [Int()]
  
  create-pop-type-task(|ctx) :
    I2F() -> <task-create-id(|ctx,[x157])> x157
    where 
      x157 := <type-is(|ctx)> [Int()]
  
  create-pop-type-task(|ctx) :
    I2D() -> <task-create-id(|ctx,[x157])> x157
    where 
      x157 := <type-is(|ctx)> [Int()]
  
  create-pop-type-task(|ctx) :
    I2B() -> <task-create-id(|ctx,[x157])> x157
    where 
      x157 := <type-is(|ctx)> [Int()]
  
  create-pop-type-task(|ctx) :
    I2S() -> <task-create-id(|ctx,[x157])> x157
    where 
      x157 := <type-is(|ctx)> [Int()]
  
  create-pop-type-task(|ctx) :
    I2C() -> <task-create-id(|ctx,[x157])> x157
    where 
      x157 := <type-is(|ctx)> [Int()]
  
  create-pop-type-task(|ctx) :
    L2F() -> <task-create-id(|ctx,[x158])> x158
    where 
      x158 := <type-is(|ctx)> [Long()]
  
  create-pop-type-task(|ctx) :
    L2D() -> <task-create-id(|ctx,[x158])> x158
    where 
      x158 := <type-is(|ctx)> [Long()]
  
  create-pop-type-task(|ctx) :
    L2I() -> <task-create-id(|ctx,[x158])> x158
    where 
      x158 := <type-is(|ctx)> [Long()]
  
  create-pop-type-task(|ctx) :
    F2D() -> <task-create-id(|ctx,[x159])> x159
    where 
      x159 := <type-is(|ctx)> [Float()]
  
  create-pop-type-task(|ctx) :
    F2I() -> <task-create-id(|ctx,[x159])> x159
    where 
      x159 := <type-is(|ctx)> [Float()]
  
  create-pop-type-task(|ctx) :
    F2L() -> <task-create-id(|ctx,[x159])> x159
    where 
      x159 := <type-is(|ctx)> [Float()]
  
  create-pop-type-task(|ctx) :
    D2I() -> <task-create-id(|ctx,[x160])> x160
    where 
      x160 := <type-is(|ctx)> [Double()]
  
  create-pop-type-task(|ctx) :
    D2L() -> <task-create-id(|ctx,[x160])> x160
    where 
      x160 := <type-is(|ctx)> [Double()]
  
  create-pop-type-task(|ctx) :
    D2F() -> <task-create-id(|ctx,[x160])> x160
    where 
      x160 := <type-is(|ctx)> [Double()]
  

rules // projections
  
