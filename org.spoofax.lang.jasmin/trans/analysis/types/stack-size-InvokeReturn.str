module types/stack-size-InvokeReturn

imports
  include/JasminXT
  analysis/names/extra-constructors
  analysis/names/binding
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  analysis/types/stack-size

rules
  // instructions/JasminXT-InvokeReturn
  stack-size: (ip, INVOKESPECIAL(JBCMethodRef(_, _, JBCMethodDesc(p*, r))))      -> ([NEXT()], <subti'(|<length>p*)> ip) where <not(?Void())> r
  stack-size: (ip, INVOKEVIRTUAL(JBCMethodRef(_, _, JBCMethodDesc(p*, r))))      -> ([NEXT()], <subti'(|<length>p*)> ip) where <not(?Void())> r
  stack-size: (ip, INVOKESTATIC(JBCMethodRef(_, _, JBCMethodDesc(p*, r))))       -> ([NEXT()], <subti'(|<length>p*)> ip) where <not(?Void())> r
  stack-size: (ip, INVOKEINTERFACE(JBCMethodRef(_, _, JBCMethodDesc(p*, r)), _)) -> ([NEXT()], <subti'(|<length>p*)> ip) where <not(?Void())> r
  stack-size: (ip, INVOKESPECIAL(JBCMethodRef(_, _, JBCMethodDesc(p*, Void()))))      -> ([NEXT()], <subti'(|<length>p*);inc'> ip)
  stack-size: (ip, INVOKEVIRTUAL(JBCMethodRef(_, _, JBCMethodDesc(p*, Void()))))      -> ([NEXT()], <subti'(|<length>p*);inc'> ip)
  stack-size: (ip, INVOKESTATIC(JBCMethodRef(_, _, JBCMethodDesc(p*, Void()))))       -> ([NEXT()], <subti'(|<length>p*);inc'> ip)
  stack-size: (ip, INVOKEINTERFACE(JBCMethodRef(_, _, JBCMethodDesc(p*, Void())), _)) -> ([NEXT()], <subti'(|<length>p*);inc'> ip)

  stack-size: ((0,p), RETURN())  -> ([], (0,p))
  stack-size: ((1,p), IRETURN()) -> ([], (0,p))
  stack-size: ((1,p), LRETURN()) -> ([], (0,p))
  stack-size: ((1,p), FRETURN()) -> ([], (0,p))
  stack-size: ((1,p), DRETURN()) -> ([], (0,p))
  stack-size: ((1,p), ARETURN()) -> ([], (0,p))

  stack-size: (ip, RET(vr))   -> ([<debug;fail> vr], ip) // cannot determine where to go from here...
  stack-size: (ip, RET_W(vr)) -> ([<debug;fail> vr], ip) // cannot determine where to go from here...