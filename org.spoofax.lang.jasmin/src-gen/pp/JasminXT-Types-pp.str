module src-gen/pp/JasminXT-Types-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  src-gen/signatures/JasminXT-Types-sig


strategies
  prettyprint-example =
    prettyprint-BaseType

  prettyprint-example =
    prettyprint-FieldType

  prettyprint-example =
    prettyprint-ComponentType

  prettyprint-BaseType :
    Byte() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("B")]
                )
              ]

  is-BaseType =
    ?Byte()

  prettyprint-BaseType :
    Char() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("C")]
                )
              ]

  is-BaseType =
    ?Char()

  prettyprint-BaseType :
    Double() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("D")]
                  )
                ]

  is-BaseType =
    ?Double()

  prettyprint-BaseType :
    Float() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("F")]
                 )
               ]

  is-BaseType =
    ?Float()

  prettyprint-BaseType :
    Int() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("I")]
               )
             ]

  is-BaseType =
    ?Int()

  prettyprint-BaseType :
    Long() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("J")]
                )
              ]

  is-BaseType =
    ?Long()

  prettyprint-BaseType :
    Short() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("S")]
                 )
               ]

  is-BaseType =
    ?Short()

  prettyprint-BaseType :
    Boolean() -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("Z")]
                   )
                 ]

  is-BaseType =
    ?Boolean()

  prettyprint-FieldType :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-FieldType)
    where t1__' := <pp-one-Z(prettyprint-BaseType)> t1__

  prettyprint-FieldType :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-FieldType)
    where t1__' := <pp-one-Z(prettyprint-ArrayType)> t1__

  prettyprint-ComponentType :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-ComponentType)
    where t1__' := <pp-one-Z(prettyprint-FieldType)> t1__

  is-BaseType =
    fail

  is-FieldType =
    fail

  is-ComponentType =
    fail


strategies
  prettyprint-example =
    prettyprint-ArrayType

  prettyprint-ArrayType :
    Array(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("["), t1__']
                     )
                   ]
    with t1__' := <pp-one-Z(prettyprint-ComponentType)> t1__

  is-ArrayType =
    ?Array(_)

  is-ArrayType =
    fail