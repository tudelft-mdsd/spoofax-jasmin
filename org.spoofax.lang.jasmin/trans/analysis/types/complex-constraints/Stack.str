module analysis/types/complex-constraints/Stack

imports
  include/JasminXT
  analysis/names/properties
  analysis/types/constraints

rules
  complex-constraint(|r): (instr@POP(), (c*,r*)) -> ([n*, c*], [r*])
    where type@TypeVar(type') := <fresh-var>
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
        ; rest  := <fresh-var>
    	; n* := [ CEq(TypeVar(i-in),  ([type], rest))       // pop-type
    	        , CNEq(TypeVar(type'), Double())
    	        , CNEq(TypeVar(type'), Long())
    	        ]
  complex-constraint(|r): (instr@POP2(), (c*,r*)) -> ([n*, c*], [r*])
    where type@TypeVar(type') := <fresh-var>
        ; type1@TypeVar(type1') := <fresh-var>
        ; type2@TypeVar(type2') := <fresh-var>
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
        ; rest  := <fresh-var>
    	; n* := [ COr([ [ CEq(TypeVar(i-in),  ([type], rest))         // pop-type
    	                , COr([ [ CEq(TypeVar(type'), Double()) ]
    	                      , [ CEq(TypeVar(type'), Long()) ]
    	                      ])
    	                ]
    	              , [ CEq(TypeVar(i-in),  ([type1, type2], rest)) // pop-type
    	                , CNEq(TypeVar(type1'), Double())
              	        , CNEq(TypeVar(type1'), Long())
    	                , CNEq(TypeVar(type2'), Double())
              	        , CNEq(TypeVar(type2'), Long())
    	                ]
    	              ])
    	        ]
  complex-constraint(|r): (instr@DUP(), (c*,r*)) -> ([n*, c*], [r*])
    where type@TypeVar(type') := <fresh-var>
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
        ; rest  := <fresh-var>
    	; n* := [ CEq(TypeVar(i-in),  ([type], rest))       // pop-type
    	        , CEq(TypeVar(i-out), ([type, type], rest)) // push-type
    	        , CNEq(TypeVar(type'), Double())
    	        , CNEq(TypeVar(type'), Long())
    	        ]
  complex-constraint(|r): (instr@DUP2(), (c*,r*)) -> ([n*, c*], [r*])
    where type@TypeVar(type')  := <fresh-var>
        ; type1@TypeVar(type1') := <fresh-var>
        ; type2@TypeVar(type2') := <fresh-var>
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
        ; rest  := <fresh-var>
    	; n* := [ COr([ [ CEq(TypeVar(i-in),  ([type], rest))       // pop-type
    	                , CEq(TypeVar(i-out), ([type, type], rest)) // push-type
    	                , COr([ [ CEq(TypeVar(type'), Double()) ]
    	                      , [ CEq(TypeVar(type'), Long()) ]
    	                      ])
    	                ]
    	              , [ CEq(TypeVar(i-in),  ([type1, type2], rest))               // pop-type
    	                , CEq(TypeVar(i-out), ([type1, type2, type1, type2], rest)) // push-type
    	                , CNEq(TypeVar(type1'), Double())
              	        , CNEq(TypeVar(type1'), Long())
    	                , CNEq(TypeVar(type2'), Double())
              	        , CNEq(TypeVar(type2'), Long())
    	                ]
    	              ])
    	        ]
  complex-constraint(|r): (instr@DUP_X1(), (c*,r*)) -> ([n*, c*], [r*])
    where type1@TypeVar(type1') := <fresh-var>
        ; type2@TypeVar(type2') := <fresh-var>
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
        ; rest  := <fresh-var>
    	; n* := [ CEq(TypeVar(i-in),  ([type1, type2], rest))        // pop-type
    	        , CEq(TypeVar(i-out), ([type1, type2, type1], rest)) // push-type
    	        , CNEq(TypeVar(type1'), Double())
    	        , CNEq(TypeVar(type1'), Long())
    	        , CNEq(TypeVar(type2'), Double())
    	        , CNEq(TypeVar(type2'), Long())
    	        ]
  complex-constraint(|r): (instr@DUP2_X1(), (c*,r*)) -> ([n*, c*], [r*])
    where type1@TypeVar(type1') := <fresh-var>
        ; type2@TypeVar(type2') := <fresh-var>
        ; type3@TypeVar(type3') := <fresh-var>
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
        ; rest  := <fresh-var>
    	; n* := [ CEq(TypeVar(type2'), Double())
              	, CEq(TypeVar(type2'), Long())
              	, COr([ [ CEq(TypeVar(i-in),  ([type1, type2], rest))        // pop-type
    	                , CEq(TypeVar(i-out), ([type1, type2, type1], rest)) // push-type
    	                , COr([ [ CEq(TypeVar(type1), Double()) ]
    	                      , [ CEq(TypeVar(type1), Long()) ]
    	                      ])
    	                ]
    	              , [ CEq(TypeVar(i-in),  ([type1, type2, type3], rest))               // pop-type
    	                , CEq(TypeVar(i-out), ([type1, type2, type3, type1, type2], rest)) // push-type
    	                , CNEq(TypeVar(type1'), Double())
              	        , CNEq(TypeVar(type1'), Long())
    	                , CNEq(TypeVar(type3'), Double())
              	        , CNEq(TypeVar(type3'), Long())
    	                ]
    	              ])
    	        ]
  complex-constraint(|r): (instr@DUP_X2(), (c*,r*)) -> ([n*, c*], [r*])
    where type1@TypeVar(type1') := <fresh-var>
        ; type2@TypeVar(type2') := <fresh-var>
        ; type3@TypeVar(type3') := <fresh-var>
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
        ; rest  := <fresh-var>
    	; n* := [ CEq(TypeVar(type1'), Double())
                , CEq(TypeVar(type1'), Long())
                , COr( [ [ CEq(TypeVar(i-in),  ([type1, type2, type3], rest))        // pop-type
    	                 , CEq(TypeVar(i-out), ([type1, type2, type3, type1], rest)) // push-type
    	                 , CNEq(TypeVar(type2'), Double())
    	                 , CNEq(TypeVar(type2'), Long())
    	                 , CNEq(TypeVar(type3'), Double())
    	                 , CNEq(TypeVar(type3'), Long())
    	                 ]
    	               , [ CEq(TypeVar(i-in),  ([type1, type2], rest))        // pop-type
    	                 , CEq(TypeVar(i-out), ([type1, type2, type1], rest)) // push-type
    	                 , COr([ [ CEq(TypeVar(type2'), Double()) ]
    	                       , [ CEq(TypeVar(type2'), Long())   ]
    	                       ])
    	                 ]
    	               ])
	            ]
  complex-constraint(|r): (instr@DUP2_X2(), (c*,r*)) -> ([n*, c*], [r*])
    where type1@TypeVar(type1') := <fresh-var>
        ; type2@TypeVar(type2') := <fresh-var>
        ; type3@TypeVar(type3') := <fresh-var>
        ; type4@TypeVar(type4') := <fresh-var>
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
        ; rest  := <fresh-var>
    	; n* := [ COr([ [ CEq(TypeVar(i-in),  ([type1, type2, type3], rest))        // pop-type
    	                , CEq(TypeVar(i-out), ([type1, type2, type3, type1], rest)) // push-type
    	                , COr([ [ CEq(TypeVar(type1'), Double()) ]
    	                      , [ CEq(TypeVar(type1'), Long()) ]
    	                      ])
    	                , CNEq(TypeVar(type2'), Double())
              	        , CNEq(TypeVar(type2'), Long())
    	                , CNEq(TypeVar(type3'), Double())
              	        , CNEq(TypeVar(type3'), Long())
    	                ]
    	              , [ CEq(TypeVar(i-in),  ([type1, type2], rest))        // pop-type
    	                , CEq(TypeVar(i-out), ([type1, type2, type1], rest)) // push-type
    	                , COr([ [ CEq(TypeVar(type1'), Double()) ]
    	                      , [ CEq(TypeVar(type1'), Long()) ]
    	                      ])
    	                , COr([ [ CEq(TypeVar(type2'), Double()) ]
    	                      , [ CEq(TypeVar(type2'), Long()) ]
    	                      ])
    	                ]
    	              , [ CEq(TypeVar(i-in),  ([type1, type2, type3], rest))               // pop-type
    	                , CEq(TypeVar(i-out), ([type1, type2, type3, type1, type2], rest)) // push-type
    	                , CNEq(TypeVar(type1'), Double())
              	        , CNEq(TypeVar(type1'), Long())
    	                , CNEq(TypeVar(type2'), Double())
              	        , CNEq(TypeVar(type2'), Long())
    	                , COr([ [ CEq(TypeVar(type3'), Double()) ]
    	                      , [ CEq(TypeVar(type3'), Long()) ]
    	                      ])
    	                ]
    	              , [ CEq(TypeVar(i-in),  ([type1, type2, type3, type4], rest))               // pop-type
    	                , CEq(TypeVar(i-out), ([type1, type2, type3, type4, type1, type2], rest)) // push-type
    	                , CNEq(TypeVar(type1'), Double())
              	        , CNEq(TypeVar(type1'), Long())
    	                , CNEq(TypeVar(type2'), Double())
              	        , CNEq(TypeVar(type2'), Long())
    	                , CNEq(TypeVar(type3'), Double())
              	        , CNEq(TypeVar(type3'), Long())
    	                , CNEq(TypeVar(type4'), Double())
              	        , CNEq(TypeVar(type4'), Long())
    	                ]
    	              ])
    	        ]
  complex-constraint(|r): (instr@SWAP(), (c*,r*)) -> ([n*, c*], [r*])
    where type1@TypeVar(type1') := <fresh-var>
        ; type2@TypeVar(type2') := <fresh-var>
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
        ; rest  := <fresh-var>
    	; n* := [ CEq(TypeVar(i-in),  ([type1, type2], rest)) // pop-type
    	        , CEq(TypeVar(i-out), ([type2, type1], rest)) // push-type
    	        , CNEq(TypeVar(type1'), Double())
    	        , CNEq(TypeVar(type1'), Long())
    	        , CNEq(TypeVar(type2'), Double())
    	        , CNEq(TypeVar(type2'), Long())
    	        ]