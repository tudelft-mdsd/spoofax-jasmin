module src-gen/pp/JasminXT-Directives-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  src-gen/signatures/JasminXT-Directives-sig


imports
  src-gen/signatures/JasminXT-Descriptors-sig
  src-gen/signatures/JasminXT-Names-sig
  src-gen/signatures/JasminXT-Numbers-sig
  src-gen/signatures/JasminXT-Strings-sig
  src-gen/signatures/JasminXT-Annotations-sig


imports
  src-gen/pp/JasminXT-Descriptors-pp
  src-gen/pp/JasminXT-Names-pp
  src-gen/pp/JasminXT-Numbers-pp
  src-gen/pp/JasminXT-Strings-pp
  src-gen/pp/JasminXT-Annotations-pp


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-Directive

  prettyprint-SDF-start-symbols =
    prettyprint-StackDirOffset

  prettyprint-SDF-start-symbols =
    prettyprint-StackDirLocalVar

  prettyprint-SDF-start-symbols =
    prettyprint-StackDirStackVar


strategies
  prettyprint-example =
    prettyprint-Directive

  prettyprint-example =
    prettyprint-StackDirOffset

  prettyprint-example =
    prettyprint-StackDirLocalVar

  prettyprint-example =
    prettyprint-StackDirStackVar

  prettyprint-example =
    prettyprint-VerificationType

  prettyprint-Directive :
    JBCLimitStack(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S(".limit stack "), t1__']
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-Int)> t1__

  is-Directive =
    ?JBCLimitStack(_)

  prettyprint-Directive :
    JBCLimitLocals(t1__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [S(".limit locals "), t1__']
                              )
                            ]
    with t1__' := <pp-one-Z(prettyprint-Int)> t1__

  is-Directive =
    ?JBCLimitLocals(_)

  prettyprint-Directive :
    JBCLine(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S(".line "), t1__']
                       )
                     ]
    with t1__' := <pp-one-Z(prettyprint-Int)> t1__

  is-Directive =
    ?JBCLine(_)

  prettyprint-Directive :
    JBCVarDecl(t1__, t2__, t3__, t4__, t5__) -> [ H(
                                                    [SOpt(HS(), "0")]
                                                  , [ S(".var ")
                                                    , t1__'
                                                    , S(" is ")
                                                    , t2__'
                                                    , S(" ")
                                                    , t3__'
                                                    , S(" from ")
                                                    , t4__'
                                                    , S(" to ")
                                                    , t5__'
                                                    ]
                                                  )
                                                ]
    with t1__' := <pp-one-Z(prettyprint-Int)> t1__
    with t2__' := <pp-one-Z(prettyprint-VarName)> t2__
    with t3__' := <pp-one-Z(prettyprint-FieldDescriptor)> t3__
    with t4__' := <pp-one-Z(prettyprint-LabelRef)> t4__
    with t5__' := <pp-one-Z(prettyprint-LabelRef)> t5__

  is-Directive =
    ?JBCVarDecl(_, _, _, _, _)

  prettyprint-Directive :
    JBCThrows(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S(".throws "), t1__']
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-ClassRef)> t1__

  is-Directive =
    ?JBCThrows(_)

  prettyprint-Directive :
    JBCCatch(t1__, t2__, t3__, t4__) -> [ H(
                                            [SOpt(HS(), "0")]
                                          , [ S(".catch ")
                                            , t1__'
                                            , S(" from ")
                                            , t2__'
                                            , S(" to ")
                                            , t3__'
                                            , S(" using ")
                                            , t4__'
                                            ]
                                          )
                                        ]
    with t1__' := <pp-one-Z(prettyprint-ClassRef)> t1__
    with t2__' := <pp-one-Z(prettyprint-LabelRef)> t2__
    with t3__' := <pp-one-Z(prettyprint-LabelRef)> t3__
    with t4__' := <pp-one-Z(prettyprint-LabelRef)> t4__

  is-Directive =
    ?JBCCatch(_, _, _, _)

  prettyprint-Directive :
    JBCSignature(t1__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S(".signature "), t1__']
                            )
                          ]
    with t1__' := <pp-one-Z(prettyprint-String)> t1__

  is-Directive =
    ?JBCSignature(_)

  prettyprint-Directive :
    JBCStack(t1__, t2__, t3__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [S(".stack")]
                                    )
                                  , t1__'
                                  , t2__'
                                  , t3__'
                                  , H(
                                      [SOpt(HS(), "0")]
                                    , [S(".end stack")]
                                    )
                                  ]
    with t1__' := <pp-indent(|"4")> [<pp-one-Z(prettyprint-StackDirOffset)> t1__]
    with t2__' := <pp-indent(|"4")> [ <pp-V-list(prettyprint-StackDirLocalVar|"0", "\t")> t2__
                                    ]
    with t3__' := <pp-indent(|"2")> [ <pp-V-list(prettyprint-StackDirStackVar|"0", "\t")> t3__
                                    ]

  is-Directive =
    ?JBCStack(_, _, _)

  prettyprint-Directive :
    JBCStack(t1__, t2__, t3__, t4__) -> [ H(
                                            [SOpt(HS(), "0")]
                                          , [ S(".stack use ")
                                            , t1__'
                                            , S(" locals")
                                            ]
                                          )
                                        , t2__'
                                        , t3__'
                                        , t4__'
                                        , H(
                                            [SOpt(HS(), "0")]
                                          , [S(".end stack")]
                                          )
                                        ]
    with t1__' := <pp-one-Z(prettyprint-Int)> t1__
    with t2__' := <pp-indent(|"4")> [<pp-one-Z(prettyprint-StackDirOffset)> t2__]
    with t3__' := <pp-indent(|"4")> [ <pp-V-list(prettyprint-StackDirLocalVar|"0", "\t")> t3__
                                    ]
    with t4__' := <pp-indent(|"2")> [ <pp-V-list(prettyprint-StackDirStackVar|"0", "\t")> t4__
                                    ]

  is-Directive =
    ?JBCStack(_, _, _, _)

  prettyprint-Directive :
    JBCDeprecated() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S(".deprecated")]
                         )
                       ]

  is-Directive =
    ?JBCDeprecated()

  prettyprint-Directive :
    JBCAttribute(t1__, t2__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [ S(".attribute ")
                                    , t1__'
                                    , S(" ")
                                    , t2__'
                                    ]
                                  )
                                ]
    with t1__' := <pp-one-Z(prettyprint-AttributeName)> t1__
    with t2__' := <pp-one-Z(prettyprint-FileName)> t2__

  is-Directive =
    ?JBCAttribute(_, _)

  prettyprint-StackDirOffset :
    Offset(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("offset "), t1__']
                      )
                    ]
    with t1__' := <pp-one-Z(prettyprint-LabelRef)> t1__

  is-StackDirOffset =
    ?Offset(_)

  prettyprint-StackDirOffset :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-StackDirOffset =
    ?None()

  prettyprint-StackDirLocalVar :
    LocalVar(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("locals "), t1__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-VerificationType)> t1__

  is-StackDirLocalVar =
    ?LocalVar(_)

  prettyprint-StackDirStackVar :
    StackVar(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("stack "), t1__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-VerificationType)> t1__

  is-StackDirStackVar =
    ?StackVar(_)

  prettyprint-VerificationType :
    Top() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("Top")]
               )
             ]

  is-VerificationType =
    ?Top()

  prettyprint-VerificationType :
    Integer() -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("Integer")]
                   )
                 ]

  is-VerificationType =
    ?Integer()

  prettyprint-VerificationType :
    Float() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("Float")]
                 )
               ]

  is-VerificationType =
    ?Float()

  prettyprint-VerificationType :
    Long() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("Long")]
                )
              ]

  is-VerificationType =
    ?Long()

  prettyprint-VerificationType :
    Double() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("Double")]
                  )
                ]

  is-VerificationType =
    ?Double()

  prettyprint-VerificationType :
    Null() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("Null")]
                )
              ]

  is-VerificationType =
    ?Null()

  prettyprint-VerificationType :
    UninitThis() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("UnitializedThis")]
                      )
                    ]

  is-VerificationType =
    ?UninitThis()

  prettyprint-VerificationType :
    Object(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("Object "), t1__']
                      )
                    ]
    with t1__' := <pp-one-Z(prettyprint-ClassName)> t1__

  is-VerificationType =
    ?Object(_)

  prettyprint-VerificationType :
    Uninit(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("Unitialized "), t1__']
                      )
                    ]
    with t1__' := <pp-one-Z(prettyprint-LabelRef)> t1__

  is-VerificationType =
    ?Uninit(_)

  is-Directive =
    fail

  is-StackDirOffset =
    fail

  is-StackDirLocalVar =
    fail

  is-StackDirStackVar =
    fail

  is-VerificationType =
    fail