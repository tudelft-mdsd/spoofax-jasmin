module analysis/types/complex-constraints/Objects

imports
  include/JasminXT
  analysis/names/properties
  analysis/types/constraints

rules
  complex-constraint: instr@AALOAD() -> n*
    where i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack>  instr
        ; rest  := <fresh-var>
        ; class-type := Reference(CRef(<fresh-var>))
        ; array-type := Array(<fresh-var>)
    	; n* := [COr([ [ CEq(TypeVar(i-in), ([Int(), Array(class-type)], rest))   // pop-type
    	               , CEq(TypeVar(i-out), ([class-type],rest))               ] // push-type
    	             , [ CEq(TypeVar(i-in), ([Int(), Array(array-type)], rest))   // pop-type
    	               , CEq(TypeVar(i-out), ([array-type],rest))               ] // push-type
    	             ])]
  complex-constraint: instr@AASTORE() -> n*
    where i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack>  instr
        ; rest  := <fresh-var>
        ; class-type := Reference(CRef(<fresh-var>))
        ; array-type := Array(<fresh-var>)
    	; n* := [COr([ [ CEq(TypeVar(i-in), ([class-type, Int(), Array(class-type)], rest)) ] // pop-type
    	             , [ CEq(TypeVar(i-in), ([array-type, Int(), Array(array-type)], rest)) ] // pop-type
    	             ])]
  complex-constraint: instr@BALOAD() -> n*
    where i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack>  instr
        ; rest  := <fresh-var>
    	; n* := [COr([ [ CEq(TypeVar(i-in), ([Int(), Array(Boolean())], rest))   // pop-type
    	               , CEq(TypeVar(i-out), ([Boolean()],rest))               ] // push-type
    	             , [ CEq(TypeVar(i-in), ([Int(), Array(Byte())], rest))   // pop-type
    	               , CEq(TypeVar(i-out), ([Byte()],rest))               ] // push-type
    	             ])]
  complex-constraint: instr@BASTORE() -> n*
    where i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack>  instr
        ; rest  := <fresh-var>
    	; n* := [COr([ [ CEq(TypeVar(i-in), ([Boolean(), Int(), Array(Boolean())], rest)) ] // pop-type
    	             , [ CEq(TypeVar(i-in), ([Byte(), Int(), Array(Byte())], rest)) ]       // pop-type
    	             ])]
    	             
  cc-aload-helper(|type): instr -> n*
    where i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack>  instr
        ; rest  := <fresh-var>
    	; n* := [ CEq(TypeVar(i-in), ([Int(), Array(type)], rest))   // pop-type
                , CEq(TypeVar(i-out), ([type],rest))               ] // push-type
  cc-astore-helper(|type): instr -> n*
    where i-out := <get-out-stack> instr
        ; i-in  := <get-in-stack>  instr
        ; rest  := <fresh-var>
    	; n* := [ CEq(TypeVar(i-in), ([type, Int(), Array(type)], rest))   // pop-type
    	        , CEq(TypeVar(i-out), rest)                              ] // push-type
  complex-constraint: CALOAD()  -> <cc-aload-helper (|Char()  )>
  complex-constraint: CASTORE() -> <cc-astore-helper(|Char()  )>
  complex-constraint: DALOAD()  -> <cc-aload-helper (|Double())>
  complex-constraint: DASTORE() -> <cc-astore-helper(|Double())>
  complex-constraint: FALOAD()  -> <cc-aload-helper (|Float() )>
  complex-constraint: FASTORE() -> <cc-astore-helper(|Float() )>
  complex-constraint: IALOAD()  -> <cc-aload-helper (|Int()   )>
  complex-constraint: IASTORE() -> <cc-astore-helper(|Int()   )>
  complex-constraint: LALOAD()  -> <cc-aload-helper (|Long()  )>
  complex-constraint: LASTORE() -> <cc-astore-helper(|Long()  )>
  complex-constraint: SALOAD()  -> <cc-aload-helper (|Short() )>
  complex-constraint: SASTORE() -> <cc-astore-helper(|Short() )>
  
  complex-constraint: instr@CHECKCAST(_) -> n*
    where cref  := Reference(CRef(<fresh-var>))
        ; i-in  := <get-in-stack> instr
        ; i-out := <get-out-stack> instr
    	; n* := [ CEq(TypeVar(i-in), ([cref], <fresh-var>)) // pop-type
    	        , CEq(TypeVar(i-out), TypeVar(i-in))        // push-type
    	        ]