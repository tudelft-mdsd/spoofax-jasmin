module trans/analysis/types/push-types/Objects.generated

imports
  
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  lib/runtime/relations/-

imports

  include/JasminXT
  analysis/types/constraints
  
signature constructors
  
  
  
rules // functions 
  

rules // relations
  

rules // rules
  
  create-push-type-task(|ctx) :
    NEW(cr) -> <task-create-id(|ctx,[x238])> x238
    where 
      x238 := <type-is(|ctx)> [cr]
  
  create-push-type-task(|ctx) :
    NEWARRAY(ct) -> <task-create-id(|ctx,[x239])> x239
    where 
      x239 := <type-is(|ctx)> [Array(ct)]
  
  create-push-type-task(|ctx) :
    ANEWARRAY(ct) -> <task-create-id(|ctx,[x239])> x239
    where 
      x239 := <type-is(|ctx)> [Array(ct)]
  
  create-push-type-task(|ctx) :
    MULTIANEWARRAY(ct, _) -> <task-create-id(|ctx,[x239])> x239
    where 
      x239 := <type-is(|ctx)> [Array(ct)]
  
  create-push-type-task(|ctx) :
    GETFIELD(JBCFieldRef(_, _, JBCFieldDesc(ft))) -> <task-create-id(|ctx,[x240])> x240
    where 
      x240 := <type-is(|ctx)> [ft]
  
  create-push-type-task(|ctx) :
    GETSTATIC(JBCFieldRef(_, _, JBCFieldDesc(ft))) -> <task-create-id(|ctx,[x241])> x241
    where 
      x241 := <type-is(|ctx)> [ft]
  
  create-push-type-task(|ctx) :
    PUTFIELD(_) -> <task-create-id(|ctx,[x242])> x242
    where 
      x242 := <type-is(|ctx)> []
  
  create-push-type-task(|ctx) :
    PUTSTATIC(_) -> <task-create-id(|ctx,[x242])> x242
    where 
      x242 := <type-is(|ctx)> []
  
  create-push-type-task(|ctx) :
    ARRAYLENGTH() -> <task-create-id(|ctx,[x243])> x243
    where 
      x243 := <type-is(|ctx)> [Int()]
  
  create-push-type-task(|ctx) :
    INSTANCEOF(cr) -> <task-create-id(|ctx,[x244])> x244
    where 
      x244 := <type-is(|ctx)> [Boolean()]
  

rules // projections
  
